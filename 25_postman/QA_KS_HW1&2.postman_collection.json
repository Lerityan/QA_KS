{
	"info": {
		"_postman_id": "63fb368b-ae17-4e2a-95f7-c9d27757b5f2",
		"name": "QA_KS_HW1&2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "get_method",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "162.55.220.72:5005/get_method?name=Testuser&age=27",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_method"
					],
					"query": [
						{
							"key": "name",
							"value": "Testuser"
						},
						{
							"key": "age",
							"value": "27"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"if (pm.response.to.have.status(200))\r",
							"{\r",
							"    //console.log(\"SHAKALAKA\")\r",
							"var responseJson = pm.response.json();\r",
							"var request= pm.request.body.formdata.toObject();\r",
							"\r",
							"//console.log(+request.salary);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Name в ответе = Testuser\", function()\r",
							"{\r",
							"  pm.expect(responseJson.name).to.eql(\"Testname\");\r",
							"});\r",
							"\r",
							"pm.test(\"Age в ответе = 27\", function()\r",
							"{\r",
							"  pm.expect(responseJson.age).to.eql(\"27\");\r",
							"});\r",
							"\r",
							"pm.test(\"Salary в ответе = 1000\", function()\r",
							"{\r",
							"  pm.expect(responseJson.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"name в ответе = name в запросе\", function()\r",
							"{\r",
							"  pm.expect(responseJson.name).to.eql(request.name);\r",
							"});\r",
							"\r",
							"pm.test(\"age в ответе = age в запросе\", function()\r",
							"{\r",
							"  pm.expect(responseJson.age).to.eql(request.age);\r",
							"});\r",
							"\r",
							"pm.test(\"salary в ответе = salary в запросе\", function()\r",
							"{\r",
							"  pm.expect(responseJson.salary).to.eql(+request.salary);\r",
							"});\r",
							"\r",
							"console.log(responseJson.family);\r",
							"\r",
							"pm.test(\"u_salary_1_5_year = salary*4 \", function()\r",
							"{\r",
							"  pm.expect(responseJson.family.u_salary_1_5_year).to.eql(+request.salary*4);\r",
							"});\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Testname",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "dog",
							"value": "Testdog",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "s",
							"disabled": true
						},
						{
							"key": "age",
							"value": "1",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "2",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_1",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_1?name=Testname&age=27&weight=70",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_1"
					],
					"query": [
						{
							"key": "name",
							"value": "Testname"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "weight",
							"value": "70"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_2?name=Testuser&age=27&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Testuser"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.to.have.status(200))\r",
							"{\r",
							"var responseJson = pm.response.json();\r",
							"var request= pm.request.url.query.toObject();\r",
							"//console.log(responseJson);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Req.name == Resp.name\", function () {\r",
							"    pm.expect(responseJson.name).to.eql(request.name)\r",
							"}); \r",
							"\r",
							"pm.test(\"Req.age == Resp.age\", function () {\r",
							"    pm.expect(responseJson.age).to.eql(request.age)\r",
							"}); \r",
							"\r",
							"pm.test(\"Req.salary == Resp.salary\", function () {\r",
							"    pm.expect(responseJson.salary).to.eql(+request.salary)\r",
							"}); \r",
							"\r",
							"console.log(responseJson.family);\r",
							"\r",
							"pm.test(\"Dog.name is exist\", function () {\r",
							"    pm.expect(responseJson.family.pets.dog.name).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Dog.age is exist\", function () {\r",
							"    pm.expect(responseJson.family.pets.dog.age).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Dog.name == Luky\", function () {\r",
							"    pm.expect(responseJson.family.pets.dog.name).to.eql(\"Luky\")\r",
							"}); \r",
							"\r",
							"pm.test(\"Dog.age == 4\", function () {\r",
							"    pm.expect(responseJson.family.pets.dog.age).to.eql(4)\r",
							"}); \r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Testname&age=27&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Testname"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.to.have.status(200))\r",
							"{\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var responseJson = pm.response.json();\r",
							"var request= pm.request.url.query.toObject();\r",
							"\r",
							"pm.test(\"Req.name == Resp.name\", function () {\r",
							"    pm.expect(responseJson.name).to.eql(request.name)\r",
							"}); \r",
							"\r",
							"pm.test(\"Req.age == Resp.age\", function () {\r",
							"    pm.expect(+responseJson.age).to.eql(+request.age)\r",
							"}); \r",
							"\r",
							"console.log(request.salary);\r",
							"console.log(responseJson.salary);\r",
							"console.log(responseJson.salary[0]);\r",
							"console.log(responseJson.salary[1]);\r",
							"console.log(responseJson.salary[2]);\r",
							"\r",
							"pm.test(\"response.salary[0] == req.salary\", function () {\r",
							"    pm.expect(+responseJson.salary[0]).to.eql(+request.salary)\r",
							"}); \r",
							"pm.test(\"response.salary[1] == req.salary\", function () {\r",
							"    pm.expect(+responseJson.salary[1]).to.eql(+request.salary*2)\r",
							"}); \r",
							"pm.test(\"response.salary[2] == req.salary\", function () {\r",
							"    pm.expect(+responseJson.salary[2]).to.eql(+request.salary*3)\r",
							"}); \r",
							"\r",
							"pm.environment.set(\"name\", request.name);\r",
							"pm.environment.set(\"age\", request.age );\r",
							"pm.environment.set(\"salary\", request.salary) ;\r",
							"\r",
							"for (var count = 0 ; count<responseJson.salary.length ; count++)\r",
							"\r",
							"{console.log(responseJson.salary[count])};\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Testuser&age=27&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Testuser"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.to.have.status(200))\r",
							"{\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseJson = pm.response.json();\r",
							"var request= pm.request.body.formdata.toObject();\r",
							"\r",
							"pm.test(\"responseJson.start_qa_salary is exist\", function () {\r",
							"    pm.expect(responseJson.start_qa_salary).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"responseJson.qa_salary_after_6_months is exist\", function () {\r",
							"    pm.expect(responseJson.qa_salary_after_6_months).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"responseJson.qa_salary_after_12_months is exist\", function () {\r",
							"    pm.expect(responseJson.qa_salary_after_12_months).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"responseJson.qa_salary_after_1.5_year is exist\", function () {\r",
							"    pm.expect(responseJson[\"qa_salary_after_1.5_year\"]).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"responseJson.qa_salary_after_3.5_years is exist\", function () {\r",
							"    pm.expect(responseJson[\"qa_salary_after_3.5_years\"]).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"responseJson.person is exist\", function () {\r",
							"    pm.expect(responseJson.person).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"responseJson.start_qa_salary == request.salary\", function () {\r",
							"    pm.expect(responseJson.start_qa_salary).to.eql(+request.salary);\r",
							"});\r",
							"\r",
							"pm.test(\"responseJson.qa_salary_after_6_months == request.salary x2\", function () {\r",
							"    pm.expect(responseJson.qa_salary_after_6_months).to.eql(+request.salary*2);\r",
							"});\r",
							"\r",
							"pm.test(\"responseJson.qa_salary_after_12_months == request.salary x2.7\", function () {\r",
							"    pm.expect(responseJson.qa_salary_after_12_months).to.eql(+request.salary*2.7);\r",
							"});\r",
							"\r",
							"pm.test(\"responseJson.qa_salary_after_1.5_year == request.salary x3.3\", function () {\r",
							"    pm.expect(responseJson[\"qa_salary_after_1.5_year\"]).to.eql(+request.salary*3.3);\r",
							"});\r",
							"\r",
							"pm.test(\"responseJson.qa_salary_after_3.5_years == request.salary x3.8\", function () {\r",
							"    pm.expect(responseJson[\"qa_salary_after_3.5_years\"]).to.eql(+request.salary*3.8);\r",
							"});\r",
							"\r",
							"\r",
							"// первый элемент - первый по мндексу или порядку?\r",
							"pm.test(\"responseJson.u_name[1] == request.salary\", function () {\r",
							"    pm.expect(responseJson.person.u_name[1]).to.eql(+request.salary);\r",
							"});\r",
							"//console.log(responseJson.person.u_name[0]);\r",
							"\r",
							"pm.test(\"responseJson.u_age == request.age\", function () {\r",
							"    pm.expect(responseJson.person.u_age).to.eql(+request.age);\r",
							"});\r",
							"\r",
							"pm.test(\"responseJson.u_salary_5_years == request.salary x4.2\", function () {\r",
							"    pm.expect(responseJson.person.u_salary_5_years).to.eql(+request.salary*4.2);\r",
							"});\r",
							"\r",
							"//console.log(responseJson.person);\r",
							"//let temp_array = Array.from(responseJson.person);\r",
							"//let test_obj = responseJson.toObject;\r",
							"//for (var prop in test_obj)\r",
							"//    {console.log(prop + \"=\"+test_obj[prop]);\r",
							"    //}\r",
							"\r",
							"//responseJson.person.forEach(function(q, index) {\r",
							"  //    console.log(q);\r",
							"    //});\r",
							"//var json = responseJson.person;\r",
							"//console.log(json);\r",
							"//console.log(json.length);\r",
							"\r",
							"//for(var i = 0; i < json.length; i++) {\r",
							"  //  var obj = json[i];\r",
							"\r",
							"    //console.log(obj.id) + \"a\";\r",
							"//}\r",
							"var json_i = JSON.stringify(responseJson); //json В строку\r",
							"//console.log(JSON.stringify(responseJson));\r",
							"var data = JSON.parse(json_i); //json строку в объект\r",
							"//console.log (data);\r",
							"const entries = Object.entries(data.person); // объект в массив\r",
							"//console.log(entries);\r",
							"for (var count = 0 ; count<entries.length ; count++)\r",
							"{console.log(entries[count])};\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"в body приходит правильный string\", function () \r",
							"{\r",
							"    pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					],
					"query": [
						{
							"key": "a",
							"value": "asdasd",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}